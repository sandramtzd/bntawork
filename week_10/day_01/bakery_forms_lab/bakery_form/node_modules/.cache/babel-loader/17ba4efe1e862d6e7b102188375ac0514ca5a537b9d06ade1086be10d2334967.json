{"ast":null,"code":"var _jsxFileName = \"/Users/sandra/Documents/bnta_work/week_10/day_01/bakery_forms_lab/bakery_form/src/cake/CakeContainer.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Cake from \"./Cake.js\";\nimport CakeForm from \"./CakeForm.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CakeContainer = () => {\n  _s();\n  const [listOfCakes, setListOfCakes] = useState([{\n    cakeName: \"Victoria Sponge\",\n    ingredients: [\"eggs\", \"butter\", \"sugar\", \"self-raising flour\", \"baking powder\", \"milk\"],\n    price: 5,\n    rating: 5\n  }, {\n    cakeName: \"Tea Loaf\",\n    ingredients: [\"eggs\", \"oil\", \"dried fruit\", \"sugar\", \"self-raising flour\", \"strong tea\"],\n    price: 2,\n    rating: 3\n  }, {\n    cakeName: \"Carrot Cake\",\n    ingredients: [\"carrots\", \"walnuts\", \"oil\", \"cream cheese\", \"flour\", \"sugar\"],\n    price: 8,\n    rating: 5\n  }]);\n  const mappedCakes = listOfCakes.map((cake, id) => {\n    return /*#__PURE__*/_jsxDEV(Cake, {\n      cake: cake\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 10\n    }, this);\n  });\n  const addNewCake = newCake => {\n    const updateListOfCakes = [...listOfCakes, newCake];\n    setListOfCakes(updateListOfCakes);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My Cakes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 3\n    }, this), mappedCakes, /*#__PURE__*/_jsxDEV(CakeForm, {\n      listOfCakes: listOfCakes,\n      addNewCake: addNewCake\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n};\n_s(CakeContainer, \"MjfFuAR89pJOKJr8TPM9YOFhBvc=\");\n_c = CakeContainer;\nexport default CakeContainer;\nvar _c;\n$RefreshReg$(_c, \"CakeContainer\");","map":{"version":3,"names":["useState","Cake","CakeForm","jsxDEV","_jsxDEV","Fragment","_Fragment","CakeContainer","_s","listOfCakes","setListOfCakes","cakeName","ingredients","price","rating","mappedCakes","map","cake","id","fileName","_jsxFileName","lineNumber","columnNumber","addNewCake","newCake","updateListOfCakes","children","_c","$RefreshReg$"],"sources":["/Users/sandra/Documents/bnta_work/week_10/day_01/bakery_forms_lab/bakery_form/src/cake/CakeContainer.js"],"sourcesContent":["import { useState } from \"react\";\nimport Cake from \"./Cake.js\";\nimport CakeForm from \"./CakeForm.js\";\n\nconst CakeContainer = () => {\n\n    const [listOfCakes, setListOfCakes] = useState(\n\t\t[\n\t\t\t{\n\t\t\t\tcakeName: \"Victoria Sponge\",\n\t\t\t\t   ingredients: [\n\t\t\t\t\t   \"eggs\",\n\t\t\t\t\t  \"butter\",\n\t\t\t\t\t  \"sugar\",\n\t\t\t\t\t  \"self-raising flour\",\n\t\t\t\t\t  \"baking powder\",\n\t\t\t\t\t  \"milk\"\n\t\t\t\t  ],\n\t\t\t\t  price: 5,\n\t\t\t\t   rating: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t cakeName: \"Tea Loaf\",\n\t\t\t\t   ingredients: [\n\t\t\t\t\t   \"eggs\",\n\t\t\t\t\t  \"oil\",\n\t\t\t\t\t  \"dried fruit\",\n\t\t\t\t\t  \"sugar\",\n\t\t\t\t\t  \"self-raising flour\",\n\t\t\t\t\t  \"strong tea\",\n\t\t\t\t  ],\n\t\t\t\t  price: 2,\n\t\t\t\t  rating: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t cakeName: \"Carrot Cake\",\n\t\t\t\t   ingredients: [\n\t\t\t\t\t\"carrots\",\n\t\t\t\t\t  \"walnuts\",\n\t\t\t\t\t  \"oil\",\n\t\t\t\t\t  \"cream cheese\",\n\t\t\t\t\t  \"flour\",\n\t\t\t\t\t  \"sugar\",\n\t\t\t\t   ],\n\t\t\t\t   price: 8,\n\t\t\t\t   rating: 5\n\t\t\t} \n\t\t]\t\t\n\t)\n\n\tconst mappedCakes = listOfCakes.map((cake, id)=> {\n\t\treturn <Cake cake = {cake}/>\n\t})\n\n\tconst addNewCake = (newCake) => {\n\t\tconst updateListOfCakes = [...listOfCakes, newCake]\n\t\tsetListOfCakes(updateListOfCakes)\n\t}\n\n  return (\n    <>\n\t\t<h2>My Cakes</h2>\n\t\t{mappedCakes}\n\t\t<CakeForm listOfCakes = {listOfCakes} addNewCake = {addNewCake}/>\n    </>\n  )\n}\n\nexport default CakeContainer;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,QAAQ,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAErC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAExB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAChD,CACC;IACCW,QAAQ,EAAE,iBAAiB;IACxBC,WAAW,EAAE,CACZ,MAAM,EACP,QAAQ,EACR,OAAO,EACP,oBAAoB,EACpB,eAAe,EACf,MAAM,CACN;IACDC,KAAK,EAAE,CAAC;IACPC,MAAM,EAAE;EACZ,CAAC,EACD;IACEH,QAAQ,EAAE,UAAU;IAClBC,WAAW,EAAE,CACZ,MAAM,EACP,KAAK,EACL,aAAa,EACb,OAAO,EACP,oBAAoB,EACpB,YAAY,CACZ;IACDC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE;EACX,CAAC,EACD;IACEH,QAAQ,EAAE,aAAa;IACrBC,WAAW,EAAE,CACf,SAAS,EACP,SAAS,EACT,KAAK,EACL,cAAc,EACd,OAAO,EACP,OAAO,CACN;IACDC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE;EACZ,CAAC,CAEH,CAAC;EAED,MAAMC,WAAW,GAAGN,WAAW,CAACO,GAAG,CAAC,CAACC,IAAI,EAAEC,EAAE,KAAI;IAChD,oBAAOd,OAAA,CAACH,IAAI;MAACgB,IAAI,EAAIA;IAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAC7B,CAAC,CAAC;EAEF,MAAMC,UAAU,GAAIC,OAAO,IAAK;IAC/B,MAAMC,iBAAiB,GAAG,CAAC,GAAGhB,WAAW,EAAEe,OAAO,CAAC;IACnDd,cAAc,CAACe,iBAAiB,CAAC;EAClC,CAAC;EAEA,oBACErB,OAAA,CAAAE,SAAA;IAAAoB,QAAA,gBACFtB,OAAA;MAAAsB,QAAA,EAAI;IAAQ;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAChBP,WAAW,eACZX,OAAA,CAACF,QAAQ;MAACO,WAAW,EAAIA,WAAY;MAACc,UAAU,EAAIA;IAAW;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA,eAC7D,CAAC;AAEP,CAAC;AAAAd,EAAA,CA9DKD,aAAa;AAAAoB,EAAA,GAAbpB,aAAa;AAgEnB,eAAeA,aAAa;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}